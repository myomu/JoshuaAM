{"version":3,"file":"static/js/620.dff1bed6.chunk.js","mappings":"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","sources":["components/attendance/EditAttendanceCheck.js","components/attendance/Attendances.js","../node_modules/react-bootstrap/esm/Table.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Form, Button, Card, Col, Row } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Checkbox } from \"../checkbox/Checkbox\";\r\nimport { CheckboxGroup } from \"../checkbox/CheckboxGroup\";\r\nimport dayjs from \"dayjs\";\r\n\r\nfunction EditAttendanceCheck() {\r\n  const [members, setMembers] = useState();\r\n  const { attendanceId } = useParams();\r\n\r\n  const [switchChecked, setSwitchChecked] = useState(false);\r\n  const [selectYear, setSelectYear] = useState();\r\n  const [selectMonth, setSelectMonth] = useState();\r\n  const [selectDay, setSelectDay] = useState();\r\n  const [memberIds, setMemberIds] = useState([]);\r\n  const [attendanceDate, setAttendanceDate] = useState();\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8080/api/attendances/check\")\r\n      .then((response) => {\r\n        setMembers(response.data);\r\n        console.log(\"---\");\r\n        console.log(response.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    axios\r\n      .get(\"http://localhost:8080/api/attendances/edit/\" + attendanceId)\r\n      .then((response) => {\r\n        setMemberIds(response.data.checkedMemberIds.map((member) => member.memberId));\r\n        setAttendanceDate(response.data.attendanceDate);\r\n\r\n        const dateTime = new Date(response.data.attendanceDate);\r\n        setSelectYear(dateTime.getFullYear());\r\n        setSelectMonth(dateTime.getMonth() + 1);\r\n        setSelectDay(dateTime.getDate());\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, [attendanceId]);\r\n\r\n  // useEffect(() => {\r\n  //   //   const fetchData = async () => {\r\n  //   //     try {\r\n  //   //     } catch (error)\r\n  //   //   }\r\n  //   // fetchData();\r\n  // }, [attendanceId]);\r\n\r\n  const handleSubmit = (event) => {\r\n    \r\n    event.preventDefault(); //페이지 리로드 방지.\r\n\r\n    memberIds.sort();\r\n\r\n    const year = parseInt(selectYear);\r\n    const month = parseInt(selectMonth) - 1;\r\n    const day = parseInt(selectDay);\r\n    const localDate = new Date(year, month, day);\r\n    //Spring 서버에서 LocalDateTime 으로 JSON 타입을 받을 때\r\n    //역직렬화가 실패하지 않도록 하기 위해서 타입을 맞춰준다.\r\n    //중간에 T 가 필요하기 때문에 추가.\r\n    const editDateTime = dayjs(localDate).format(\"YYYY-MM-DDTHH:mm:ss\");\r\n    let formData;\r\n\r\n    if (switchChecked === true) {\r\n      formData = {\r\n        memberIds: memberIds,\r\n        attendanceDate: editDateTime\r\n      };\r\n    } else {\r\n      //날짜 선택 switch 가 false 일 경우 다시 년,월,일 을 null로 설정\r\n      formData = {\r\n        memberIds: memberIds,\r\n        attendanceDate: attendanceDate\r\n      };\r\n    }\r\n\r\n    axios\r\n      .post(\"http://localhost:8080/api/attendances/edit/\" + attendanceId, formData, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        alert(\"출석 수정에 성공하였습니다.\");\r\n        window.location.replace(\"/attendances\");\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        alert(\"출석 수정에 실패하였습니다.\");\r\n      });\r\n  };\r\n\r\n  const handleSwitchChange = () => {\r\n    setSwitchChecked(!switchChecked);\r\n  };\r\n\r\n  const handleSelectYearChange = (e) => {\r\n    setSelectYear(e.target.value);\r\n  };\r\n  const handleSelectMonthChange = (e) => {\r\n    setSelectMonth(e.target.value);\r\n  };\r\n  const handleSelectDayChange = (e) => {\r\n    setSelectDay(e.target.value);\r\n  };\r\n\r\n  // 현재 연도, 일 가져오기(월의 경우 항상 12개월이므로 생략)\r\n  const currentYear = new Date().getFullYear();\r\n\r\n  //Date에서 날을 0으로 주면 달의 마지막 날을 반환한다.\r\n  const daysInYearAndMonth = new Date(selectYear, selectMonth, 0).getDate();\r\n\r\n  // 연도, 월, 일 배열 생성\r\n  const years = Array.from({ length: 5 }, (_, i) => currentYear - i);\r\n  const months = Array.from({ length: 12 }, (_, i) => i + 1);\r\n  const days = Array.from({ length: daysInYearAndMonth }, (_, i) => i + 1);\r\n\r\n  if (!loading) {\r\n    return (\r\n      <div className=\"container\">\r\n        <p>출석수정 화면</p>\r\n\r\n        <Form onSubmit={handleSubmit}>\r\n          <Card>\r\n            <Card.Body>\r\n              <p>수동 날짜 입력</p>\r\n              <Form.Group>\r\n                <Form.Check\r\n                  type=\"switch\"\r\n                  id=\"custom-switch\"\r\n                  label={\r\n                    <span>\r\n                      날짜 입력\r\n                      <small>\r\n                        {\" \"}\r\n                        - 수동 입력을 하지 않을 시 기존의 날짜를 기준으로\r\n                        저장합니다.\r\n                      </small>\r\n                    </span>\r\n                  }\r\n                  checked={switchChecked}\r\n                  onChange={handleSwitchChange}\r\n                />\r\n              </Form.Group>\r\n              <Row>\r\n                <Form.Group as={Col}>\r\n                  <Form.Select\r\n                    value={selectYear}\r\n                    onChange={handleSelectYearChange}\r\n                    disabled={!switchChecked}\r\n                  >\r\n                    <option value=\"\">연도</option>\r\n                    {years.map((year) => (\r\n                      <option key={year} value={year}>\r\n                        {year}년\r\n                      </option>\r\n                    ))}\r\n                  </Form.Select>\r\n                </Form.Group>\r\n                <Form.Group as={Col}>\r\n                  <Form.Select\r\n                    value={selectMonth}\r\n                    onChange={handleSelectMonthChange}\r\n                    disabled={!switchChecked}\r\n                  >\r\n                    <option value=\"\">월</option>\r\n                    {months.map((month) => (\r\n                      <option key={month} value={month}>\r\n                        {month}월\r\n                      </option>\r\n                    ))}\r\n                  </Form.Select>\r\n                </Form.Group>\r\n                <Form.Group as={Col}>\r\n                  <Form.Select\r\n                    value={selectDay}\r\n                    onChange={handleSelectDayChange}\r\n                    disabled={!switchChecked}\r\n                  >\r\n                    <option value=\"\">일</option>\r\n                    {days.map((day) => (\r\n                      <option key={day} value={day}>\r\n                        {day}일\r\n                      </option>\r\n                    ))}\r\n                  </Form.Select>\r\n                </Form.Group>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n\r\n          <CheckboxGroup\r\n            label=\"출석체크 인원\"\r\n            values={memberIds}\r\n            onChange={setMemberIds}\r\n          >\r\n            {members\r\n              ? members.map((a, i) => (\r\n                  <div key={i}>\r\n                    <Card className=\"mb-3\">\r\n                      <Card.Header>\r\n                        <p>{a.groupName}</p>\r\n                      </Card.Header>\r\n                      <Card.Body>\r\n                        {a.members\r\n                          ? a.members.map((b, j) => (\r\n                              <Checkbox key={j} value={b.memberId}>\r\n                                {b.name}\r\n                              </Checkbox>\r\n                            ))\r\n                          : null}\r\n                      </Card.Body>\r\n                    </Card>\r\n                  </div>\r\n                ))\r\n              : null}\r\n          </CheckboxGroup>\r\n\r\n          <Button\r\n            variant=\"primary\"\r\n            type=\"submit\"\r\n            className=\"btnSave\"\r\n            disabled={memberIds.length === 0}\r\n          >\r\n            출석 수정\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <p>로딩중 입니다.</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EditAttendanceCheck;\r\n","import axios from \"axios\";\r\nimport { Suspense, useEffect, useState } from \"react\";\r\nimport { Button, Col, Form, Row, Table } from \"react-bootstrap\";\r\nimport { Route, Routes, useNavigate } from \"react-router-dom\";\r\nimport EditAttendanceCheck from \"./EditAttendanceCheck\";\r\nimport { CheckboxGroup } from \"../checkbox/CheckboxGroup\";\r\nimport { Checkbox } from \"../checkbox/Checkbox\";\r\n\r\nfunction Attendances() {\r\n  const [attendances, setAttendances] = useState(\"\");\r\n  const [attendanceIds, setAttendanceIds] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8080/api/attendances\")\r\n      .then((response) => {\r\n        setAttendances(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault(); //페이지 리로드 방지.\r\n    console.log(attendanceIds);\r\n    // memberIds.sort();\r\n\r\n    const formData = {\r\n      attendanceIds: attendanceIds,\r\n    };\r\n\r\n    axios\r\n      .post(\"http://localhost:8080/api/attendances\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        }\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        alert(\"출석 삭제에 성공하였습니다.\");\r\n        window.location.replace(\"/attendances\");\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        alert(\"출석 삭제에 실패하였습니다.\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>출석리스트 화면</p>\r\n      <Suspense fallback={<div>로딩중임</div>}>\r\n        <Routes>\r\n          <Route\r\n            path=\"/\"\r\n            element={\r\n              <div className=\"table-responsive\">\r\n                <Form onSubmit={handleSubmit}>\r\n                  <Button\r\n                    variant=\"warning\"\r\n                    type=\"submit\"\r\n                    className=\"btnSave\"\r\n                    disabled={attendanceIds.length === 0}\r\n                  >\r\n                    출석 삭제\r\n                  </Button>\r\n                  <CheckboxGroup\r\n                    label=\"출석체크 인원\"\r\n                    values={attendanceIds}\r\n                    onChange={setAttendanceIds}\r\n                  >\r\n                    <Table bordered hover className=\"text-nowrap customTable\">\r\n                      <thead>\r\n                        <tr className=\"text-center align-middle\">\r\n                          <th>#</th>\r\n                          <th>날짜</th>\r\n                          <th>출석인원</th>\r\n                          <th>총인원</th>\r\n                          <th>수정</th>\r\n                        </tr>\r\n                      </thead>\r\n\r\n                      <AttendanceList attendances={attendances} />\r\n                    </Table>\r\n                  </CheckboxGroup>\r\n                </Form>\r\n              </div>\r\n            }\r\n          />\r\n          {/* <Route path=\"/create\" element={<CreateMember />} /> */}\r\n          <Route path=\"/edit/:attendanceId\" element={<EditAttendanceCheck />} />\r\n        </Routes>\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Attendances;\r\n\r\nexport function AttendanceList({ attendances }) {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <tbody style={{ fontSize: \"14px\" }}>\r\n      {attendances\r\n        ? attendances.map((a, i) => {\r\n            const date = new Date(a.attendanceDate);\r\n            const year = date.getFullYear();\r\n            const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n            const day = String(date.getDate()).padStart(2, \"0\");\r\n\r\n            const formattedDate = `${year}-${month}-${day}`;\r\n\r\n            return (\r\n              <tr key={i} className=\"text-center align-middle\">\r\n                <td>\r\n                  <Checkbox value={a.attendanceId}></Checkbox>\r\n                </td>\r\n                <td>{formattedDate}</td>\r\n                <td>\r\n                  <Row xs=\"auto\">\r\n                    {a.attendanceDataDtoList.map((b, j) => (\r\n                      <Col key={j}>\r\n                        <div>{b.memberName}</div>\r\n                      </Col>\r\n                    ))}\r\n                  </Row>\r\n                </td>\r\n                <td>{a.totalMember}</td>\r\n                <td>\r\n                  <Button\r\n                    variant=\"light\"\r\n                    onClick={() => {\r\n                      navigate(\"edit/\" + a.attendanceId);\r\n                    }}\r\n                  >\r\n                    <i className=\"fa-regular fa-pen-to-square\"></i>\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })\r\n        : null}\r\n    </tbody>\r\n  );\r\n}\r\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n  const table = /*#__PURE__*/_jsx(\"table\", {\n    ...props,\n    className: classes,\n    ref: ref\n  });\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n  return table;\n});\nexport default Table;"],"names":["members","setMembers","useState","attendanceId","useParams","switchChecked","setSwitchChecked","selectYear","setSelectYear","selectMonth","setSelectMonth","selectDay","setSelectDay","memberIds","setMemberIds","attendanceDate","setAttendanceDate","loading","setLoading","useEffect","axios","get","then","response","data","console","log","catch","error","checkedMemberIds","map","member","memberId","dateTime","Date","getFullYear","getMonth","getDate","handleSubmit","event","preventDefault","sort","year","parseInt","month","day","localDate","editDateTime","dayjs","format","formData","post","headers","alert","window","location","replace","handleSwitchChange","handleSelectYearChange","e","target","value","handleSelectMonthChange","handleSelectDayChange","currentYear","daysInYearAndMonth","years","Array","from","length","_","i","months","days","_jsx","children","_jsxs","className","Form","onSubmit","Card","Body","Group","Check","type","id","label","checked","onChange","Row","as","Col","Select","disabled","CheckboxGroup","values","a","Header","groupName","b","j","Checkbox","name","Button","variant","attendances","setAttendances","attendanceIds","setAttendanceIds","Suspense","fallback","Routes","Route","path","element","Table","bordered","hover","AttendanceList","EditAttendanceCheck","_ref","navigate","useNavigate","style","fontSize","date","String","padStart","formattedDate","concat","xs","attendanceDataDtoList","memberName","totalMember","onClick","React","ref","bsPrefix","striped","borderless","size","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","responsiveClass"],"sourceRoot":""}