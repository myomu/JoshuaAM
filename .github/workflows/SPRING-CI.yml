name: Spring Boot CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_SECRETS_MANAGER_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRETS_MANAGER_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Fetch Secrets from AWS Secrets Manager and Generate application.yml
        run: |
          # Fetch secrets from AWS Secrets Manager
          DB_HOST=$(aws secretsmanager get-secret-value --secret-id your-db-host-secret-id --query SecretString --output text)
          DB_PORT=$(aws secretsmanager get-secret-value --secret-id your-db-port-secret-id --query SecretString --output text)
          DB_NAME=$(aws secretsmanager get-secret-value --secret-id your-db-name-secret-id --query SecretString --output text)
          DB_USERNAME=$(aws secretsmanager get-secret-value --secret-id your-db-username-secret-id --query SecretString --output text)
          DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id your-db-password-secret-id --query SecretString --output text)
          AWS_ACCESS_KEY=$(aws secretsmanager get-secret-value --secret-id your-aws-access-key-secret-id --query SecretString --output text)
          AWS_SECRET_KEY=$(aws secretsmanager get-secret-value --secret-id your-aws-secret-key-secret-id --query SecretString --output text)
          AWS_S3_BUCKET=$(aws secretsmanager get-secret-value --secret-id your-aws-s3-bucket-secret-id --query SecretString --output text)
          AWS_S3_REGION=$(aws secretsmanager get-secret-value --secret-id your-aws-s3-region-secret-id --query SecretString --output text)
          SECRET_KEY=$(aws secretsmanager get-secret-value --secret-id your-secret-key-secret-id --query SecretString --output text)
          CORS_ALLOW_1=$(aws secretsmanager get-secret-value --secret-id your-cors-allow-1-secret-id --query SecretString --output text)
          CORS_ALLOW_2=$(aws secretsmanager get-secret-value --secret-id your-cors-allow-2-secret-id --query SecretString --output text)
          
          # Generate application.yml file
          cat <<EOF > src/main/resources/application.yml
          spring:
            datasource:
              driver-class-name: org.mariadb.jdbc.Driver
              url: jdbc:mariadb://${DB_HOST}:${DB_PORT}/${DB_NAME}?characterEncoding=UTF-8&serverTimezone=UTC
              username: ${DB_USERNAME}
              password: ${DB_PASSWORD}
            jpa:
              hibernate:
                ddl-auto: update
              properties:
                hibernate:
                  format_sql: true
              open-in-view: false
          
            cloud:
              aws:
                credentials:
                  access-key: ${AWS_ACCESS_KEY}
                  secret-key: ${AWS_SECRET_KEY}
                s3:
                  bucket: ${AWS_S3_BUCKET}
                region:
                  static: ${AWS_S3_REGION}
          
            servlet:
              multipart:
                max-file-size: 50MB
                max-request-size: 50MB
          
            data:
              redis:
                host: localhost
                port: 6379
          
          site:
            joshua:
              am:
                jwt:
                  secret-key: ${SECRET_KEY}
                cors:
                  cors-allow-1: ${CORS_ALLOW_1}
                  cors-allow-2: ${CORS_ALLOW_2}
          
          logging.level:
            org.hibernate.SQL: debug
            org.hibernate.orm.jdbc.bind: trace
          
          EOF

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}:server-v1.0.0 .
          docker push ${{ secrets.DOCKER_REPO }}:server-v1.0.0

      - name: EC2에 SSH 접속 및 배포
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            cd /home/ubuntu/project/
            docker-compose down
            docker-compose pull
            docker-compose up -d
